{"version":3,"sources":["index.js"],"names":["CANVAS_SIZE","RECT_WIDTH","RECT_HEIGHT","CIRCLE_RADIUS","BoundingRectangle","x","y","width","height","this","br","getX","getY","getWidth","getHeight","RandomShapeFiller","props","rectCalculateBoundingRectangle","rotation","rad","Math","PI","sine","sin","cosine","cos","console","log","semiCircleCalculateBoundingRectangle","handleClick","setState","state","newShapes","newBoundingRectangles","shapes","length","newRect","random","getRandomColor","concat","boundingRectangles","newSemiCircle","bind","Konva","Util","fillColor","fill","outerRadius","angle","w","h","stroke","shapeComponents","i","push","getRectangle","getSemiCircle","j","getBoundingRectangles","className","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6acc80bb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Konva from 'konva';\nimport { Stage, Layer, Rect, Arc } from 'react-konva';\n\nconst CANVAS_SIZE = 300;\nconst RECT_WIDTH = 20;\nconst RECT_HEIGHT = 100;\nconst CIRCLE_RADIUS = 50;\n\nclass BoundingRectangle {\n    constructor(x, y, width, height) {\n        // this.id = i;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    // getID() { return this.id; };\n    getX() { return this.x; };\n    getY() { return this.y; };\n    getWidth() { return this.width; };\n    getHeight() { return this.height; };\n\n    haveIntersection(br) {\n        // if (br.getID() === this.i) { return false; };\n        if (br.getX() === this.x && br.getY() === this.y && br.getWidth() === this.width && br.getHeight() === this.height) {\n            return false;\n        }\n        return !(br.getX() > this.x + this.width ||\n        br.getX() + br.getWidth() < this.x ||\n        br.getY() > this.y + this.height ||\n        br.getY() + br.getHeight() < this.y)\n    };\n}\n\nclass RandomShapeFiller extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            shapes : [],\n            boundingRectangles : []\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    rectCalculateBoundingRectangle = (x, y, rotation) => {\n        const rad = rotation * Math.PI / 180;\n        const sine = Math.sin(rad);\n        const cosine = Math.cos(rad);\n        if (rotation <= 90) {\n            return new BoundingRectangle(x-sine*RECT_HEIGHT, y, sine*RECT_HEIGHT+cosine*RECT_WIDTH, cosine*RECT_HEIGHT+sine*RECT_WIDTH);\n        }\n        console.log(x, y, sine*RECT_HEIGHT, cosine*RECT_HEIGHT, sine*RECT_WIDTH, cosine*RECT_WIDTH)\n        return new BoundingRectangle(x-sine*RECT_HEIGHT+cosine*RECT_WIDTH, y+cosine*RECT_HEIGHT, sine*RECT_HEIGHT-cosine*RECT_WIDTH, -cosine*RECT_HEIGHT+sine*RECT_WIDTH);\n    };\n\n    semiCircleCalculateBoundingRectangle = (x, y, rotation) => {\n        const rad = rotation * Math.PI / 180;\n        const sine = Math.sin(rad);\n        const cosine = Math.cos(rad);\n\n        if (rotation <= 90) {\n            return new BoundingRectangle(x-CIRCLE_RADIUS, y-sine*CIRCLE_RADIUS, CIRCLE_RADIUS+cosine*CIRCLE_RADIUS, CIRCLE_RADIUS+sine*CIRCLE_RADIUS);\n        } else if (rotation <= 180) {\n            return new BoundingRectangle(x-CIRCLE_RADIUS, y-CIRCLE_RADIUS, CIRCLE_RADIUS-cosine*CIRCLE_RADIUS, CIRCLE_RADIUS+sine*CIRCLE_RADIUS);\n        } else if (rotation <= 270) {\n            return new BoundingRectangle(x+cosine*CIRCLE_RADIUS, y-CIRCLE_RADIUS, CIRCLE_RADIUS-cosine*CIRCLE_RADIUS, CIRCLE_RADIUS-sine*CIRCLE_RADIUS);\n        }\n        return new BoundingRectangle(x-cosine*CIRCLE_RADIUS, y+sine*CIRCLE_RADIUS, CIRCLE_RADIUS+cosine*CIRCLE_RADIUS, CIRCLE_RADIUS-sine*CIRCLE_RADIUS);\n    };\n\n    handleClick = () => {\n        this.setState(state => {\n            let newShapes;\n            let newBoundingRectangles;\n            if (state.shapes.length % 8 === 0) {\n                const newRect = [Math.random()*(CANVAS_SIZE-RECT_WIDTH), Math.random()*(CANVAS_SIZE-RECT_HEIGHT), Math.random()*180, this.getRandomColor()];\n                newShapes = state.shapes.concat(newRect);\n                newBoundingRectangles = state.boundingRectangles.concat(this.rectCalculateBoundingRectangle(newRect[0], newRect[1], newRect[2]));\n            } else {\n                const newSemiCircle = [CIRCLE_RADIUS+Math.random()*(CANVAS_SIZE-CIRCLE_RADIUS), CIRCLE_RADIUS+Math.random()*(CANVAS_SIZE-CIRCLE_RADIUS*2), Math.random()*360, this.getRandomColor()];\n                newShapes = state.shapes.concat(newSemiCircle);\n                newBoundingRectangles = state.boundingRectangles.concat(this.semiCircleCalculateBoundingRectangle(newSemiCircle[0], newSemiCircle[1], newSemiCircle[2]));\n            }\n            return {\n                shapes: newShapes,\n                boundingRectangles: newBoundingRectangles,\n            };\n        });\n    };\n\n    getRandomColor() {\n        return Konva.Util.getRandomColor();\n    };\n\n    getRectangle(x, y, rotation, fillColor) {\n        return (<Rect\n                x={x}\n                y={y}\n                width={RECT_WIDTH}\n                height={RECT_HEIGHT}\n                fill={fillColor}\n                rotation={rotation}\n            />\n            );\n    };\n\n    getSemiCircle(x, y, rotation, fillColor) {\n        return (<Arc\n            x={x}\n            y={y}\n            outerRadius={CIRCLE_RADIUS}\n            fill={fillColor}\n            angle={180}\n            rotation={rotation}\n        />);\n    };\n\n    getBoundingRectangles(x, y, w, h) {\n        return (<Rect x={x} y={y} width={w} height={h} stroke={\"green\"}/>);\n    };\n\n    render() {\n        const shapeComponents = [];\n        const boundingRectangles = [];\n\n        for (let i = 0; i < this.state.shapes.length; i+=4) {\n            if (i % 8 === 0) {\n                shapeComponents.push(this.getRectangle(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3]));\n            } else {\n                shapeComponents.push(this.getSemiCircle(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3]));\n            }\n        }\n\n        for (let j = 0; j < this.state.boundingRectangles.length; j++) {\n            const br = this.state.boundingRectangles[j];\n            boundingRectangles.push(this.getBoundingRectangles(br.getX(), br.getY(), br.getWidth(), br.getHeight()));\n        }\n\n        return (\n            <div className=\"centered\">\n                <Stage width={CANVAS_SIZE} height={CANVAS_SIZE} onClick={this.handleClick}>\n                    <Layer>\n                        <Rect x={0} y={0} width={CANVAS_SIZE} height={CANVAS_SIZE} stroke={\"black\"}/>\n                        {shapeComponents}\n                        {boundingRectangles}\n                    </Layer>\n                </Stage>\n            </div>\n        )\n    }\n}\n\n\n\n\nReactDOM.render(<RandomShapeFiller />, document.getElementById('root'));\n"],"sourceRoot":""}