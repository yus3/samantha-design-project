{"version":3,"sources":["index.js"],"names":["CANVAS_WIDTH","window","innerWidth","CANVAS_HEIGHT","innerHeight","CIRCLE_RADIUS","RETRY_LIMIT","SHAPE_TYPE_CIRCLE","SHAPE_TYPE_SQUARE","SHAPE_TYPE_TRIANGLE","BoundingRectangle","x","y","width","height","toString","this","br","RandomShapeFiller","props","rectCalculateBoundingRectangle","multiplier","circleCalculateBoundingRectangle","r","triangleCalculateBoundingRectangle","checkCollision","current","i","state","boundingRectangles","length","hasIntersection","getShapeWithRetry","shapeType","newShape","boundingRect","shapeAdded","getRandomSizeMultiplier","shapeRadius","shapeLength","Math","random","getRandomColor","isOffCanvas","handleClick","setState","shapeResult","newShapes","shapes","newBoundingRectangles","concat","alert","bind","document","title","Konva","Util","floor","rotation","fillColor","sides","radius","fill","w","h","stroke","shapeComponents","push","getSquare","getCircle","getTriangle","className","onClick","text","fontSize","align","React","Component","ShapeFillerWithButton","componentRef","createRef","Fragment","ref","style","display","justifyContent","alignItems","exportComponentAsJPEG","margin","location","reload","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.34a7115d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\n\nimport Konva from 'konva';\nimport {Stage, Layer, Rect, RegularPolygon, Circle, Text} from 'react-konva';\n\nconst CANVAS_WIDTH = window.innerWidth;\nconst CANVAS_HEIGHT = window.innerHeight;\nconst CIRCLE_RADIUS = 25;\nconst RETRY_LIMIT = 500;\nconst SHAPE_TYPE_CIRCLE = 'circle';\nconst SHAPE_TYPE_SQUARE = 'square';\nconst SHAPE_TYPE_TRIANGLE = 'triangle';\n\nclass BoundingRectangle {\n    constructor(x, y, width, height) {\n        // this.id = i;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    toString = () => { return 'x: ' + this.x + ', y: ' + this.y + ', width: ' + this.width + ', height: ' + this.height };\n\n    isOffCanvas() {\n        return (this.x < 0 || this.y < 0 ||\n            this.y + this.height > CANVAS_HEIGHT ||\n            this.x + this.width > CANVAS_WIDTH);\n    }\n\n    hasIntersection(br){\n        // if (br.getID() === this.i) { return false; };\n        if (br.x === this.x && br.y === this.y && br.width === this.width && br.height === this.height) {\n            return false;\n        }\n        return !(br.x > this.x + this.width ||\n        br.x + br.width < this.x ||\n        br.y > this.y + this.height ||\n        br.y + br.height < this.y)\n    };\n}\n\nclass RandomShapeFiller extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            shapes : [],\n            boundingRectangles : []\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        document.title = 'Art or Not';\n    }\n\n    rectCalculateBoundingRectangle = (x, y, multiplier) => {\n        return this.circleCalculateBoundingRectangle(x, y, multiplier);\n    };\n\n    circleCalculateBoundingRectangle = (x, y, multiplier) => {\n        const r = CIRCLE_RADIUS * multiplier;\n        return new BoundingRectangle(x-r, y-r, 2*r, 2*r);\n    };\n\n    triangleCalculateBoundingRectangle = (x, y, multiplier) => {\n        return this.circleCalculateBoundingRectangle(x, y, multiplier);\n    };\n\n    checkCollision = (current) => {\n        for (let i = 0; i < this.state.boundingRectangles.length; i++) {\n            if (current.hasIntersection(this.state.boundingRectangles[i])) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getShapeWithRetry = (shapeType) => {\n        let shapeAdded = false;\n        let newShape, boundingRect;\n        for (let i = 0; i < RETRY_LIMIT; i++) {\n            const multiplier = this.getRandomSizeMultiplier();\n            const shapeRadius = CIRCLE_RADIUS * multiplier;\n            const shapeLength = shapeRadius * 2;\n            switch(shapeType) {\n                case SHAPE_TYPE_SQUARE:\n                    newShape = [Math.random()*(CANVAS_WIDTH-shapeLength), Math.random()*(CANVAS_HEIGHT-shapeLength), multiplier, Math.random()*90, this.getRandomColor()];\n                    boundingRect = this.rectCalculateBoundingRectangle(newShape[0], newShape[1], newShape[2], newShape[3]);\n                    break;\n                case SHAPE_TYPE_CIRCLE:\n                    newShape = [shapeRadius+Math.random()*(CANVAS_WIDTH-shapeRadius), shapeRadius+Math.random()*(CANVAS_HEIGHT-shapeRadius*2), multiplier, 0, this.getRandomColor()];\n                    boundingRect = this.circleCalculateBoundingRectangle(newShape[0], newShape[1], newShape[2]);\n                    break;\n                case SHAPE_TYPE_TRIANGLE:\n                    newShape = [Math.random()*(CANVAS_WIDTH-shapeRadius), Math.random()*(CANVAS_HEIGHT-shapeRadius), multiplier, Math.random()*120, this.getRandomColor()];\n                    boundingRect = this.triangleCalculateBoundingRectangle(newShape[0], newShape[1], newShape[2]);\n                    break;\n                default:\n                    break;\n            }\n            if (boundingRect.isOffCanvas() || this.checkCollision(boundingRect)) {\n                continue;\n            } else {\n                shapeAdded = true;\n                break;\n            }\n        }\n        return [shapeAdded, newShape, boundingRect];\n    };\n\n    handleClick = () => {\n        this.setState(state => {\n            let newShapes = state.shapes;\n            let newBoundingRectangles = state.boundingRectangles;\n            let shapeResult;\n            switch (state.shapes.length % 15) {\n                case 0:\n                    shapeResult = this.getShapeWithRetry(SHAPE_TYPE_SQUARE);\n                    break;\n                case 5:\n                    shapeResult = this.getShapeWithRetry(SHAPE_TYPE_CIRCLE);\n                    break;\n                case 10:\n                    shapeResult = this.getShapeWithRetry(SHAPE_TYPE_TRIANGLE);\n                    break;\n                default:\n                    break;\n            }\n            const shapeAdded = shapeResult[0];\n            const newShape = shapeResult[1];\n            const boundingRect = shapeResult[2];\n            if (shapeAdded) {\n                newShapes = state.shapes.concat(newShape);\n                newBoundingRectangles = state.boundingRectangles.concat(boundingRect);\n            } else {\n                window.alert(\"Canvas is full\\nYou can scroll down to export your masterpiece or reset the canvas\");\n            }\n            return {\n                shapes: newShapes,\n                boundingRectangles: newBoundingRectangles,\n            };\n        });\n    };\n\n    getRandomColor() {\n        return Konva.Util.getRandomColor();\n    }\n\n    getRandomSizeMultiplier() {\n        // 1, 2 or 3\n        return Math.floor(Math.random() * 3 + 1);\n    }\n\n    getSquare(x, y, multiplier, rotation, fillColor) {\n        return (<RegularPolygon\n                x={x}\n                y={y}\n                sides={4}\n                radius={CIRCLE_RADIUS*multiplier}\n                fill={fillColor}\n                rotation={rotation}\n            />);\n    }\n\n    getCircle(x, y, multiplier, rotation, fillColor) {\n        return (<Circle\n            x={x}\n            y={y}\n            radius={CIRCLE_RADIUS*multiplier}\n            fill={fillColor}\n        />);\n    }\n\n    getTriangle(x, y, multiplier, rotation, fillColor) {\n        return (<RegularPolygon\n            x={x}\n            y={y}\n            sides={3}\n            radius={CIRCLE_RADIUS*multiplier}\n            fill={fillColor}\n            rotation={rotation}\n        />);\n    };\n\n    getBoundingRectangles(x, y, w, h) {\n        return (<Rect x={x} y={y} width={w} height={h} stroke={\"green\"}/>);\n    }\n\n    render() {\n        const shapeComponents = [];\n        const boundingRectangles = [];\n\n        for (let i = 0; i < this.state.shapes.length; i+=5) {\n            switch(i % 15) {\n                case 0:\n                    shapeComponents.push(this.getSquare(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3], this.state.shapes[i+4]));\n                    break;\n                case 5:\n                    shapeComponents.push(this.getCircle(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3], this.state.shapes[i+4]));\n                    break;\n                case 10:\n                    shapeComponents.push(this.getTriangle(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3], this.state.shapes[i+4]));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // for (let j = 0; j < this.state.boundingRectangles.length; j++) {\n        //     const br = this.state.boundingRectangles[j];\n        //     boundingRectangles.push(this.getBoundingRectangles(br.x, br.y, br.width, br.height));\n        // }\n\n        return (\n            <div className=\"centered\">\n                <Stage width={CANVAS_WIDTH} height={CANVAS_HEIGHT} onClick={this.handleClick}>\n                    <Layer>\n                        <Rect x={0} y={0} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} stroke={\"white\"} fill={\"white\"}/>\n                        {shapeComponents.length === 0 && <Text x={CANVAS_WIDTH/2-95} y={CANVAS_HEIGHT/2} text={\"click to add a random shape\"} fontSize={15} align={'center'}></Text>}\n                        {shapeComponents.length === 0 && <Text x={CANVAS_WIDTH/2-100} y={CANVAS_HEIGHT-30} text={\"scroll down for saving options\"} fontSize={15} align={'center'}></Text>}\n                        {shapeComponents}\n                    </Layer>\n                </Stage>\n            </div>\n        )\n    }\n}\n\nexport default class ShapeFillerWithButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.componentRef = React.createRef();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <RandomShapeFiller ref={this.componentRef} />\n                <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <button onClick={() => exportComponentAsJPEG(this.componentRef)} style={{margin: \"5px\"}}>Export as JPEG</button>\n                    <button onClick={() => window.location.reload()} style={{margin: \"5px\"}}>Reset Canvas</button>\n                </div>\n            </React.Fragment>);\n    }\n}\n\nReactDOM.render(<ShapeFillerWithButton />, document.getElementById('root'));\n"],"sourceRoot":""}