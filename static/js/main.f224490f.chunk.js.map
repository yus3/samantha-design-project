{"version":3,"sources":["index.js"],"names":["CANVAS_SIZE","RECT_WIDTH","RECT_HEIGHT","CIRCLE_RADIUS","CIRCLE_ROTATION","RandomShapeFiller","props","handleClick","setState","state","shapes","length","concat","Math","random","getRandomColor","bind","Konva","Util","x","y","isFilled","fillColor","width","height","fill","rotation","outerRadius","angle","shapeComponents","i","this","push","getRectangle","getSemiCircle","className","onClick","stroke","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yRAOMA,EAAc,IACdC,EAAa,GACbC,EAAc,IACdC,EAAgB,GAChBC,EAAkB,GAElBC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,YAAc,WACV,EAAKC,UAAS,SAAAC,GAOV,MAAO,CACHC,OANAD,EAAMC,OAAOC,OAAS,IAAM,EAChBF,EAAMC,OAAOE,OAAO,CAACC,KAAKC,UAAUd,EAAYC,GAAaY,KAAKC,UAAUd,EAAYE,IAAc,EAAM,EAAKa,mBAEjHN,EAAMC,OAAOE,OAAO,CAACT,EAAcU,KAAKC,UAAUd,EAAYG,GAAgBA,EAAcU,KAAKC,UAAUd,EAA0B,EAAdG,GAAkBC,EAAiB,EAAKW,wBAbnL,EAAKN,MAAQ,CACTC,OAAS,IAGb,EAAKH,YAAc,EAAKA,YAAYS,KAAjB,gBAPJ,E,8EAyBf,OAAOC,IAAMC,KAAKH,mB,mCAGTI,EAAGC,EAAGC,EAAUC,GACzB,OAAQ,kBAAC,OAAD,CACAH,EAAGA,EACHC,EAAGA,EACHG,MAAOtB,EACPuB,OAAQtB,EACRuB,KAAMJ,EAAWC,EAAW,O,oCAK1BH,EAAGC,EAAGM,EAAUJ,GAC1B,OAAQ,kBAAC,MAAD,CACJH,EAAGA,EACHC,EAAGA,EACHO,YAAaxB,EACbsB,KAAMH,EACNM,MAAO,IACPF,SAAUA,M,+BASd,IAFA,IAAMG,EAAkB,GAEfC,EAAI,EAAGA,EAAIC,KAAKtB,MAAMC,OAAOC,OAAQmB,GAAG,EACzCA,EAAI,IAAM,EACVD,EAAgBG,KAAKD,KAAKE,aAAaF,KAAKtB,MAAMC,OAAOoB,EAAE,GAAIC,KAAKtB,MAAMC,OAAOoB,EAAE,GAAIC,KAAKtB,MAAMC,OAAOoB,EAAE,GAAIC,KAAKtB,MAAMC,OAAOoB,EAAE,KAEnID,EAAgBG,KAAKD,KAAKG,cAAcH,KAAKtB,MAAMC,OAAOoB,EAAE,GAAIC,KAAKtB,MAAMC,OAAOoB,EAAE,GAAIC,KAAKtB,MAAMC,OAAOoB,EAAE,GAAIC,KAAKtB,MAAMC,OAAOoB,EAAE,KAI5I,OACI,yBAAKK,UAAU,YACX,kBAAC,QAAD,CAAOZ,MAAOvB,EAAawB,OAAQxB,EAAaoC,QAASL,KAAKxB,aAC1D,kBAAC,QAAD,KACI,kBAAC,OAAD,CAAMY,EAAG,EAAGC,EAAG,EAAGG,MAAOvB,EAAawB,OAAQxB,EAAaqC,OAAQ,UAClER,S,GArEOS,IAAMC,WAgFtCC,IAASC,OAAO,kBAACpC,EAAD,MAAuBqC,SAASC,eAAe,U","file":"static/js/main.f224490f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Konva from 'konva';\nimport { Stage, Layer, Rect, Arc } from 'react-konva';\n\nconst CANVAS_SIZE = 300;\nconst RECT_WIDTH = 20;\nconst RECT_HEIGHT = 100;\nconst CIRCLE_RADIUS = 50;\nconst CIRCLE_ROTATION = 90;\n\nclass RandomShapeFiller extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            shapes : [],\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = () => {\n        this.setState(state => {\n            let newShapes;\n            if (state.shapes.length % 8 === 0) {\n                newShapes = state.shapes.concat([Math.random()*(CANVAS_SIZE-RECT_WIDTH), Math.random()*(CANVAS_SIZE-RECT_HEIGHT), true, this.getRandomColor()]);\n            } else {\n                newShapes = state.shapes.concat([CIRCLE_RADIUS+Math.random()*(CANVAS_SIZE-CIRCLE_RADIUS), CIRCLE_RADIUS+Math.random()*(CANVAS_SIZE-CIRCLE_RADIUS*2), CIRCLE_ROTATION, this.getRandomColor()]);\n            }\n            return {\n                shapes: newShapes,\n            };\n        });\n    };\n\n    getRandomColor() {\n        return Konva.Util.getRandomColor();\n    };\n\n    getRectangle(x, y, isFilled, fillColor) {\n        return (<Rect\n                x={x}\n                y={y}\n                width={RECT_WIDTH}\n                height={RECT_HEIGHT}\n                fill={isFilled ? fillColor :\"\"}\n            />\n            );\n    };\n\n    getSemiCircle(x, y, rotation, fillColor) {\n        return (<Arc\n            x={x}\n            y={y}\n            outerRadius={CIRCLE_RADIUS}\n            fill={fillColor}\n            angle={180}\n            rotation={rotation}\n        />);\n    };\n\n    render() {\n        // {this.getSemiCircle(100, 100, 50, 90, this.getRandomColor())}\n        // {this.getRectangle(100, 100, 20, 100, true, this.getRandomColor(), false)}\n        const shapeComponents = [];\n\n        for (let i = 0; i < this.state.shapes.length; i+=4) {\n            if (i % 8 === 0) {\n                shapeComponents.push(this.getRectangle(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3]));\n            } else {\n                shapeComponents.push(this.getSemiCircle(this.state.shapes[i+0], this.state.shapes[i+1], this.state.shapes[i+2], this.state.shapes[i+3]));\n            }\n        }\n\n        return (\n            <div className=\"centered\">\n                <Stage width={CANVAS_SIZE} height={CANVAS_SIZE} onClick={this.handleClick}>\n                    <Layer>\n                        <Rect x={0} y={0} width={CANVAS_SIZE} height={CANVAS_SIZE} stroke={\"black\"}/>\n                        {shapeComponents}\n                    </Layer>\n                </Stage>\n            </div>\n        )\n    }\n}\n\n\n\n\nReactDOM.render(<RandomShapeFiller />, document.getElementById('root'));\n"],"sourceRoot":""}